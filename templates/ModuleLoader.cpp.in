// Generated by ue-vcpkg-export

#include "${ModuleName}LoaderModule.h"

void F${ModuleName}LoaderModule::StartupModule()
{
	FModuleManager& Manager = FModuleManager::Get();
	for(const FName& RequiredModule : RequiredModules)
	{
		if(!Manager.IsModuleLoaded(RequiredModule))
		{
			UE_LOG(LogTemp, Display, TEXT("Loading %s, required by ${ModuleName}"), *RequiredModule.ToString());
			IModuleInterface* RequiredModuleInterface = Manager.LoadModule(RequiredModule, ELoadModuleFlags::LogFailures);
			verifyf(RequiredModuleInterface != nullptr, TEXT("Failed to load module %s!"), *RequiredModule.ToString());
		}
	}

	FString Platform = FPlatformProperties::IniPlatformName();
	for (const FString& BinaryName : DynamicLibraryBinaryNames[Platform])
	{
		void* Handle = LoadDynamicLibrary(BinaryName);
		DynamicLibraryHandles.Add(Handle);
	}
}

void F${ModuleName}LoaderModule::ShutdownModule()
{
	while (DynamicLibraryHandles.Num() > 0)
	{
		void* Handle = DynamicLibraryHandles.Pop();
		FPlatformProcess::FreeDllHandle(Handle);
	}
}

void* F${ModuleName}LoaderModule::LoadDynamicLibrary(const FString& LibPathRelativeToModuleDir)
{
	FString GameSourceDirRelative = FPaths::GameSourceDir();
	FString GameSourceDir = IFileManager::Get().ConvertToAbsolutePathForExternalAppForRead(*GameSourceDirRelative);
	FString LibraryDirectoryRelativeToModuleDir = FPaths::GetPath(LibPathRelativeToModuleDir);
	FString LibraryFileName = FPaths::GetCleanFilename(LibPathRelativeToModuleDir);
	FString LibraryDirectory = FPaths::Combine(GameSourceDir, "ThirdParty", "${ModuleName}", LibraryDirectoryRelativeToModuleDir);
	FPlatformProcess::AddDllDirectory(*LibraryDirectory);

	FString FullLibPath = FPaths::Combine(LibraryDirectory, LibraryFileName);
	FullLibPath = IFileManager::Get().ConvertToAbsolutePathForExternalAppForRead(*FullLibPath);

	void* Handle = FPlatformProcess::GetDllHandle(*FullLibPath);
	verifyf(Handle != nullptr, TEXT("Failed to load %s"), *FullLibPath);
	return Handle;
}

IMPLEMENT_MODULE(F${ModuleName}LoaderModule, ${ModuleName}LoaderModule);